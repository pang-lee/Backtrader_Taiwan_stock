[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "backtrader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "backtrader",
        "description": "backtrader",
        "detail": "backtrader",
        "documentation": {}
    },
    {
        "label": "date2num",
        "importPath": "backtrader",
        "description": "backtrader",
        "isExtraImport": true,
        "detail": "backtrader",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "ASCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "AbstractDataBase",
        "importPath": "backtrader.feed",
        "description": "backtrader.feed",
        "isExtraImport": true,
        "detail": "backtrader.feed",
        "documentation": {}
    },
    {
        "label": "shioaji",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shioaji",
        "description": "shioaji",
        "detail": "shioaji",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "kind": 6,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "class PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')\n    params = (\n        ('datetime', None),  # 使用 DataFrame 的索引作为 datetime\n        ('open', -1),        # 不使用 open 列\n        ('high', -1),        # 不使用 high 列\n        ('low', -1),         # 不使用 low 列\n        ('close', 'close'),  # 使用 close 列\n        ('volume', 'volume'),# 使用 volume 列\n        ('bid_price', 'bid_price'),  # 使用 bid_price 列",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "kind": 6,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "class MyStrategy(bt.Strategy):\n    params = (\n        ('buy_tick_type', 1),\n        ('sell_tick_type', 2),\n        ('cash', 10000),\n        ('commission', 0.01),\n    )\n    def __init__(self):\n        self.order = None  # 记录当前是否有未完成的订单\n        # 设置手续费",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "client = MongoClient(\n    host=os.getenv('mongo_host'),\n    port=int(os.getenv('mongo_port')),\n    username=os.getenv('mongo_username'),\n    password=os.getenv('mongo_password'),\n    authSource=os.getenv('auth_source')\n)\ndb = client['stock_data']\ncollection = db['1101']\n# 查询条件",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "db = client['stock_data']\ncollection = db['1101']\n# 查询条件\nstart_date = \"2023-01-01\"\nend_date = \"2023-01-06\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "collection = db['1101']\n# 查询条件\nstart_date = \"2023-01-01\"\nend_date = \"2023-01-06\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "start_date = \"2023-01-01\"\nend_date = \"2023-01-06\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}\n# 从 MongoDB 读取数据并转换为 DataFrame\ndata = []",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "end_date = \"2023-01-06\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}\n# 从 MongoDB 读取数据并转换为 DataFrame\ndata = []\nfor document in collection.find(query):",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "query = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}\n# 从 MongoDB 读取数据并转换为 DataFrame\ndata = []\nfor document in collection.find(query):\n    for tick in document['ticks']:",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "data = []\nfor document in collection.find(query):\n    for tick in document['ticks']:\n        data.append(tick)\ndf = pd.DataFrame(data)\ndf['ts'] = pd.to_datetime(df['ts'])\ndf.rename(columns={'ts': 'datetime'}, inplace=True)\ndf.set_index('datetime', inplace=True)\nclass PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "df = pd.DataFrame(data)\ndf['ts'] = pd.to_datetime(df['ts'])\ndf.rename(columns={'ts': 'datetime'}, inplace=True)\ndf.set_index('datetime', inplace=True)\nclass PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')\n    params = (\n        ('datetime', None),  # 使用 DataFrame 的索引作为 datetime\n        ('open', -1),        # 不使用 open 列\n        ('high', -1),        # 不使用 high 列",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "df['ts']",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "df['ts'] = pd.to_datetime(df['ts'])\ndf.rename(columns={'ts': 'datetime'}, inplace=True)\ndf.set_index('datetime', inplace=True)\nclass PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')\n    params = (\n        ('datetime', None),  # 使用 DataFrame 的索引作为 datetime\n        ('open', -1),        # 不使用 open 列\n        ('high', -1),        # 不使用 high 列\n        ('low', -1),         # 不使用 low 列",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "cerebro",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "cerebro = bt.Cerebro()\ncerebro.addstrategy(MyStrategy)\n# 设置初始资金和手续费\ncerebro.broker.set_cash(10000)\ncerebro.broker.setcommission(commission=0.01)\n# 添加数据源\ndatafeed = PandasData(dataname=df)  # 使用 DataFrame 作为数据源\ncerebro.adddata(datafeed)\n# 运行策略\ncerebro.run()",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "datafeed",
        "kind": 5,
        "importPath": "bt-csvfeed",
        "description": "bt-csvfeed",
        "peekOfCode": "datafeed = PandasData(dataname=df)  # 使用 DataFrame 作为数据源\ncerebro.adddata(datafeed)\n# 运行策略\ncerebro.run()\ncerebro.plot()\n# 打印最终的现金和持仓\nprint('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())",
        "detail": "bt-csvfeed",
        "documentation": {}
    },
    {
        "label": "MongoDBDataFeed",
        "kind": 6,
        "importPath": "bt-databaseFeed",
        "description": "bt-databaseFeed",
        "peekOfCode": "class MongoDBDataFeed(bt.feed.DataBase):\n    lines = ('ts', 'close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')\n    params = (\n        ('datetime', 'ts'),\n        ('ts', None),\n        ('close', None),\n        ('volume', None),\n        ('bid_price', None),\n        ('bid_volume', None),\n        ('ask_price', None),",
        "detail": "bt-databaseFeed",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "kind": 6,
        "importPath": "bt-databaseFeed",
        "description": "bt-databaseFeed",
        "peekOfCode": "class MyStrategy(bt.Strategy):\n    def __init__(self):\n        print(\"Strategy initialized.\")\n        print(f\"Data has {len(self.datas)} bars\")\n    def next(self):\n        print(f'Date: {bt.num2date(self.data.ts[0])}, Close: {self.data.close[0]}, Volume: {self.data.volume[0]}')\n# 使用MongoDBDataFeed\ncerebro = bt.Cerebro()\n# 定义时间段\nstart_date = datetime(2023, 1, 4)",
        "detail": "bt-databaseFeed",
        "documentation": {}
    },
    {
        "label": "cerebro",
        "kind": 5,
        "importPath": "bt-databaseFeed",
        "description": "bt-databaseFeed",
        "peekOfCode": "cerebro = bt.Cerebro()\n# 定义时间段\nstart_date = datetime(2023, 1, 4)\nend_date = datetime(2023, 1, 4)\ncollection_names=['1101']\n# 为每个collection创建MongoDBDataFeed实例并添加到Cerebro\nfor collection_name in collection_names:\n    datafeed = MongoDBDataFeed(db_name='stock_data', collection_name=collection_name, start_date=start_date.strftime('%Y-%m-%d'), end_date=end_date.strftime('%Y-%m-%d'))\n    # 添加数据feed到Cerebro\n    cerebro.adddata(datafeed, name=collection_name)",
        "detail": "bt-databaseFeed",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "bt-databaseFeed",
        "description": "bt-databaseFeed",
        "peekOfCode": "start_date = datetime(2023, 1, 4)\nend_date = datetime(2023, 1, 4)\ncollection_names=['1101']\n# 为每个collection创建MongoDBDataFeed实例并添加到Cerebro\nfor collection_name in collection_names:\n    datafeed = MongoDBDataFeed(db_name='stock_data', collection_name=collection_name, start_date=start_date.strftime('%Y-%m-%d'), end_date=end_date.strftime('%Y-%m-%d'))\n    # 添加数据feed到Cerebro\n    cerebro.adddata(datafeed, name=collection_name)\n    # 检查加载了多少数据\n    print(f\"Number of ticks loaded: {len(datafeed.data_list)}\")",
        "detail": "bt-databaseFeed",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "bt-databaseFeed",
        "description": "bt-databaseFeed",
        "peekOfCode": "end_date = datetime(2023, 1, 4)\ncollection_names=['1101']\n# 为每个collection创建MongoDBDataFeed实例并添加到Cerebro\nfor collection_name in collection_names:\n    datafeed = MongoDBDataFeed(db_name='stock_data', collection_name=collection_name, start_date=start_date.strftime('%Y-%m-%d'), end_date=end_date.strftime('%Y-%m-%d'))\n    # 添加数据feed到Cerebro\n    cerebro.adddata(datafeed, name=collection_name)\n    # 检查加载了多少数据\n    print(f\"Number of ticks loaded: {len(datafeed.data_list)}\")\ncerebro.addstrategy(MyStrategy)",
        "detail": "bt-databaseFeed",
        "documentation": {}
    },
    {
        "label": "SmaCross",
        "kind": 6,
        "importPath": "bt-shioaji",
        "description": "bt-shioaji",
        "peekOfCode": "class SmaCross(bt.SignalStrategy):\n    def __init__(self):\n        sma1, sma2 = bt.ind.SMA(period=10), bt.ind.SMA(period=15)\n        crossover = bt.ind.CrossOver(sma1, sma2)\n        self.signal_add(bt.SIGNAL_LONG, crossover)\nclass ShioajiFeeds(bt.feed.DataBase):\n    params = (\n        (\"api_key\", os.getenv('API_KEY')),\n        (\"secret_key\", os.getenv('SECRET_KEY')),\n        (\"start\", datetime.now().strftime(\"%Y-%m-%d\")),",
        "detail": "bt-shioaji",
        "documentation": {}
    },
    {
        "label": "ShioajiFeeds",
        "kind": 6,
        "importPath": "bt-shioaji",
        "description": "bt-shioaji",
        "peekOfCode": "class ShioajiFeeds(bt.feed.DataBase):\n    params = (\n        (\"api_key\", os.getenv('API_KEY')),\n        (\"secret_key\", os.getenv('SECRET_KEY')),\n        (\"start\", datetime.now().strftime(\"%Y-%m-%d\")),\n        (\"end\", datetime.now().strftime(\"%Y-%m-%d\")),\n        (\"stock\", \"2330\"),\n        # 因為 Shioaji 取得的資料是每分鐘，所以設成 TimeFrame.Minutes\n        (\"timeframe\", bt.TimeFrame.Minutes),\n    )",
        "detail": "bt-shioaji",
        "documentation": {}
    },
    {
        "label": "cerebro",
        "kind": 5,
        "importPath": "bt-shioaji",
        "description": "bt-shioaji",
        "peekOfCode": "cerebro = bt.Cerebro()\ndata = ShioajiFeeds(start='2021-10-01', end='2021-10-04', stock='2330')\ncerebro.resampledata(data, timeframe=bt.TimeFrame.Days)\ncerebro.addstrategy(bt.Strategy)\ncerebro.run()\ncerebro.plot()",
        "detail": "bt-shioaji",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "bt-shioaji",
        "description": "bt-shioaji",
        "peekOfCode": "data = ShioajiFeeds(start='2021-10-01', end='2021-10-04', stock='2330')\ncerebro.resampledata(data, timeframe=bt.TimeFrame.Days)\ncerebro.addstrategy(bt.Strategy)\ncerebro.run()\ncerebro.plot()",
        "detail": "bt-shioaji",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "nfs",
        "description": "nfs",
        "peekOfCode": "client = MongoClient(\n    host=os.getenv('mongo_host'),\n    port=int(os.getenv('mongo_port')),\n    username=os.getenv('mongo_username'),\n    password=os.getenv('mongo_password'),\n    authSource=os.getenv('auth_source')\n)\n# 选择数据库和集合\ndb = client['stock_data']\n# 指定Z盘路径",
        "detail": "nfs",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "nfs",
        "description": "nfs",
        "peekOfCode": "db = client['stock_data']\n# 指定Z盘路径\nz_drive_path = 'Z:\\\\歷史資料'\n# 检查Z盘是否存在\nif os.path.exists(z_drive_path):\n    # 初始化变量\n    data_dict = {}\n    # 遍历Z盘中的所有文件和文件夹\n    for root, dirs, files in os.walk(z_drive_path):\n        for file in files:",
        "detail": "nfs",
        "documentation": {}
    },
    {
        "label": "z_drive_path",
        "kind": 5,
        "importPath": "nfs",
        "description": "nfs",
        "peekOfCode": "z_drive_path = 'Z:\\\\歷史資料'\n# 检查Z盘是否存在\nif os.path.exists(z_drive_path):\n    # 初始化变量\n    data_dict = {}\n    # 遍历Z盘中的所有文件和文件夹\n    for root, dirs, files in os.walk(z_drive_path):\n        for file in files:\n            if file.endswith('.csv'):\n                print('正在處理文件至data_dict')",
        "detail": "nfs",
        "documentation": {}
    },
    {
        "label": "PandasData",
        "kind": 6,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "class PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')\n    params = (\n        ('datetime', None),  # 使用 DataFrame 的索引作为 datetime\n        ('open', -1),        # 不使用 open 列\n        ('high', -1),        # 不使用 high 列\n        ('low', -1),         # 不使用 low 列\n        ('close', 'close'),  # 使用 close 列\n        ('volume', 'volume'),# 使用 volume 列\n        ('bid_price', 'bid_price'),  # 使用 bid_price 列",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "PriceVolumeSignal",
        "kind": 6,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "class PriceVolumeSignal(bt.Signal):\n    lines = ('signal',)\n    plotinfo = dict(subplot=False)\n    def __init__(self):\n        self.price_volume_dict = {}\n        self.high_price = 0\n        self.last_prices = deque(maxlen=30)  # 存储过去30秒的价格和成交量\n    def next(self):\n        close = self.data.close[0]\n        volume = self.data.volume[0]",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "kind": 6,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "class MyStrategy(bt.Strategy):\n    def __init__(self):\n        self.price_volume_signal = PriceVolumeSignal()\n        self.signal = self.price_volume_signal.lines.signal\n    def next(self):\n        close = self.data.close[0]\n        signal = self.signal[0]\n        # 打印信号和当前成交金额\n        print(f\"Signal: {signal}, Current Price: {close}\")\n        if signal == 1:",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "client = MongoClient(\n    host=os.getenv('mongo_host'),\n    port=int(os.getenv('mongo_port')),\n    username=os.getenv('mongo_username'),\n    password=os.getenv('mongo_password'),\n    authSource=os.getenv('auth_source')\n)\ndb = client['stock_data']\ncollection = db['1101']\n# 查询条件",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "db = client['stock_data']\ncollection = db['1101']\n# 查询条件\nstart_date = \"2023-03-13\"\nend_date = \"2023-03-14\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "collection = db['1101']\n# 查询条件\nstart_date = \"2023-03-13\"\nend_date = \"2023-03-14\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "start_date = \"2023-03-13\"\nend_date = \"2023-03-14\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}\n# 从 MongoDB 读取数据并转换为 DataFrame\ndata = []",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "end_date = \"2023-03-14\"\nquery = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}\n# 从 MongoDB 读取数据并转换为 DataFrame\ndata = []\nfor document in collection.find(query):",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "query = {\n    'date': {\n        '$gte': start_date,\n        '$lte': end_date\n    }\n}\n# 从 MongoDB 读取数据并转换为 DataFrame\ndata = []\nfor document in collection.find(query):\n    for tick in document['ticks']:",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "data = []\nfor document in collection.find(query):\n    for tick in document['ticks']:\n        data.append(tick)\ndf = pd.DataFrame(data)\ndf['ts'] = pd.to_datetime(df['ts'])\ndf.rename(columns={'ts': 'datetime'}, inplace=True)\ndf.set_index('datetime', inplace=True)\nclass PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "df = pd.DataFrame(data)\ndf['ts'] = pd.to_datetime(df['ts'])\ndf.rename(columns={'ts': 'datetime'}, inplace=True)\ndf.set_index('datetime', inplace=True)\nclass PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')\n    params = (\n        ('datetime', None),  # 使用 DataFrame 的索引作为 datetime\n        ('open', -1),        # 不使用 open 列\n        ('high', -1),        # 不使用 high 列",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "df['ts']",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "df['ts'] = pd.to_datetime(df['ts'])\ndf.rename(columns={'ts': 'datetime'}, inplace=True)\ndf.set_index('datetime', inplace=True)\nclass PandasData(bt.feeds.PandasData):\n    lines = ('close', 'volume', 'bid_price', 'bid_volume', 'ask_price', 'ask_volume', 'tick_type')\n    params = (\n        ('datetime', None),  # 使用 DataFrame 的索引作为 datetime\n        ('open', -1),        # 不使用 open 列\n        ('high', -1),        # 不使用 high 列\n        ('low', -1),         # 不使用 low 列",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "data = bt.feeds.PandasData(dataname=df)\ncerebro = bt.Cerebro()\ncerebro.adddata(data)\ncerebro.addstrategy(MyStrategy)\n# 设置初始资金和手续费\ncerebro.broker.set_cash(10000)\ncerebro.broker.setcommission(commission=0.01)\n# 运行策略\ncerebro.run()\ncerebro.plot()",
        "detail": "singal",
        "documentation": {}
    },
    {
        "label": "cerebro",
        "kind": 5,
        "importPath": "singal",
        "description": "singal",
        "peekOfCode": "cerebro = bt.Cerebro()\ncerebro.adddata(data)\ncerebro.addstrategy(MyStrategy)\n# 设置初始资金和手续费\ncerebro.broker.set_cash(10000)\ncerebro.broker.setcommission(commission=0.01)\n# 运行策略\ncerebro.run()\ncerebro.plot()",
        "detail": "singal",
        "documentation": {}
    }
]